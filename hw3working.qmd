---
title: "hw3working"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

You can add options to executable code like this

```{r}
library(sf)       # For spatial data handling
library(dplyr)    # For data manipulation
library(ggplot2)  # For plotting
library(tidyr)    # For data cleaning
```

```{r}
# Read in data 
grocery_stores <- st_read("/Users/abbypender/Desktop/plan372/hw3-data/triangle_supermarkets_osm.shp")
demographics <- read.csv("/Users/abbypender/Desktop/plan372/hw3-data/triangle_census.csv")
block_groups <- st_read("/Users/abbypender/Desktop/plan372/hw3-data/orange_durham_wake_block_groups.shp")
street_network <- st_read("/Users/abbypender/Desktop/plan372/hw3-data/triangle_highways_osm.shp")


```

### Step 2: Create Food Desert Map 

##### Calculate food desert areas:

```{r}
grocery_buffers <- st_buffer(grocery_stores, dist = 1609)

st_write(grocery_buffers, "/Users/abbypender/Desktop/plan372/hw3-data/grocery_buffers.shp")


# load grocery_buffers into Qgis and add everything on top of it 
# look up st right 
# couple sentences after each question 


```

\#

```{r}
intersections <- st_intersects(block_groups, grocery_buffers, sparse = FALSE)
block_groups$in_food_desert <- !sapply(intersections, function(x) length(x) > 0)
block_groups$in_food_desert <- !sapply(intersections, function(x) length(x) > 0)
block_groups$in_food_desert <- factor(block_groups$in_food_desert, 
                                       levels = c(TRUE, FALSE), 
                                       labels = c("Food Desert", "Not Food Desert"))

select by location tool, attribute table set to 0, set for 1 to be the one selected 
recordings for the class either thursday or tuesday 

```

##### Identify block groups in food deserts: 

```{r}

```

```{r}

```

```{# Determine if each block group intersects with any grocery buffer}
# Create the plot
ggplot() +
  geom_sf(data = block_groups, aes(fill = in_food_desert), alpha = 0.5) +  # Block groups
  geom_sf(data = grocery_buffers, fill = "lightblue", alpha = 0.3) +  # Grocery buffers
  theme_minimal() +
  labs(title = "Overlay of Grocery Buffers and Block Groups",
       fill = "Food Desert Status") +
  scale_fill_manual(values = c("lightgreen", "salmon"), 
                    labels = c("Not Food Desert", "Food Desert"))



           # Length of each 









```

### Step 3: Demographic Analysis 

##### Calculate the percentage of Wake County population in food deserts:

```{r}
total_population <- sum(demographics$total_population[demographics$county == "Wake"])
food_desert_population <- sum(demographics$total_population[demographics$in_food_desert == TRUE])
percentage_food_desert <- (food_desert_population / total_population) * 100


```

##### Evaluate demographic characteristics:

```{r}
food_desert_stats <- demographics %>%
    filter(in_food_desert == TRUE) %>%
    summarize(
        percent_no_vehicle = sum(zero_vehicle_households) / sum(total_households) * 100,
        percent_low_income = sum(low_income_households) / sum(total_households) * 100
    )

overall_stats <- demographics %>%
    summarize(
        percent_no_vehicle = sum(zero_vehicle_households) / sum(total_households) * 100,
        percent_low_income = sum(low_income_households) / sum(total_households) * 100
    )

```

```{r}
library(dplyr)
library(readr)
buffereddata <- read_csv("/Users/abbypender/Desktop/plan372/buffereddata.csv")
filt_buffer <- buffereddata %>% filter(COUNTYFP == 183, nearfd == 1)
total_population_wake <- filt_buffer %>% 
  summarize(total_population_wake = sum(triangle_census_total_population, na.rm = TRUE))
print(total_population_wake)
wake_data <- buffereddata %>% filter(COUNTYFP == 183)
```

```{r}
percentage_zero_vehicle <- wake_data %>% filter(nearfd ==1) %>% 
  summarize(percentage = (sum(triangle_census_zero_vehicle_households, na.rm = TRUE) / 
                          sum(triangle_census_total_households, na.rm = TRUE)) * 100)

# View the percentage
print(percentage_zero_vehicle)
```
```{r}
percentage_lowinc <-  wake_data %>% filter(nearfd ==1) %>% 
  summarize(percentage = (sum(triangle_census_households_income_less_than_35k, na.rm = TRUE) / 
                          sum(triangle_census_total_households, na.rm = TRUE)) * 100)
print(percentage_lowinc)
```
